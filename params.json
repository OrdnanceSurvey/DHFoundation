{"name":"DHFoundation","tagline":"","body":"DHFoundation\r\n============\r\n\r\nCommon repository of useful iOS code. Full documentation can be found [here](documentation/) or downloaded as an Xcode docset [here](documentation/DHFoundation.docset.zip).\r\n\r\n## `DHNotificationStore`\r\nThis is a mechanism to make dealing with `NSNotificationCenter`'s block based methods simpler.\r\n\r\nInstead of\r\n\r\n```\r\n// We need to hang on to this observer object to remove later\r\nid observer = [[NSNotificationCenter defaultCenter] addObserverForName:DHNotificationName\r\n                                                                object:nil\r\n                                                                 queue:[NSOperationQueue currentQueue]\r\n                                                            usingBlock:^(NSNotification *note) {\r\n                                                                // Handle notification\r\n                                                            }];\r\n[[NSNotificationCenter defaultCenter] removeObserver:observer];\r\n```\r\n\r\n`DHNotificationStore` wraps this, and using associated objects and weak references, allows the object lifecycle to handle removing the notification observer, leaving us with\r\n\r\n```\r\n[self.dh_notificationStore addObserverForName:DHNotificationName usingBlock:^(NSNotification *note) {\r\n    // Handle notification\r\n}];\r\n```\r\n\r\n## `DHConfiguration`\r\nI wish I could remember the blog post where I discovered this idea so I could credit it. If it was your idea, please let me know so I can.\r\n\r\n`DHConfiguration` is a class for wrapping access to a plist configuration file. It uses the objective-c runtime to add accessor methods at runtime to read the class. Simply subclass `DHConfiguration`, add your own properties to your subclass of the correct type, and declare them as `@dynamic` in the implementation. Out of the box, this supports integers, floats, bools, any type natively supported by the plist format, as well as converting a string value to `NSURL`. It is trivial to extend to support further type conversion from string inputs in future.\r\n\r\n## `DHReachabilityEventHandler`\r\nThis is a simple way to handle reachability changes within a class. Via a category on `NSObject`, each class is given a `dh_reachability` class that exposes both a `DHReachability` object, which is simply Apple's `Reachability` class but namespaced, as well as a `changed` event handler block that will be fired whenever the reachability status changes.\r\n\r\n## Categories\r\nThere are various useful categories in this library, see the documentation for more info.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}